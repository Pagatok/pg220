@startuml model

class Carte{
    - valeur: int
    - couleur: enum Couleur
    + Carte(): Carte
    + getValeur(): int
    + getCouleur(): Couleur
    + setValeur(int valeur)
    + setCouleur(Couleur couleur)
}

class Combinaison{
    - cartes: Card_list
    - type: enum Type
    + Combinaison(): Combinaison 
    + getType(): Type 
    + getScore(): int 
    + toString(): String
}

class Joueur{
    - id_joueur: int
    - pied: Card_list
    + Joueur(): Joueur
    + getPied(): Card_list
    + getId(): int
    + getTaillePied(): int
    + ajouterCarte(Carte new_carte)
    + retirerCarte(Carte old_carte)
    + setId(int new_id)
}

class Card_list{
    - liste_cartes: List<Carte>
    - int taille_max
    + Card_list(): Card_list
    + Card_list(int taille_max): Card_list
    + ajouterCarte(Carte new_carte): boolean
    + removeCarte(Carte old_carte)
    + nombreDeCartes(): int 
    + getCartes(): List<Carte> 
    + getValeurCarte(int indice_carte): int
    + getCouleurCarte(int indice_carte): Couleur
    + shuffle()
    + piocher(): Carte
    + toString(): String   
}

class Borne{
    - combinaisonJ1: Combinaison
    - combinaisonJ2: Combinaison
    - revendique: boolean
    - id_joueur: int
    + Borne(): Borne
    + determinerRevendiquation(): int
    + isRevendique(): boolean
    + getIdJoueur(): int
}

class Frontiere{
    - nbrBorne: int
    - liste_bornes: List<Borne>
    + Frontiere(): Frontiere
}


class Pioche{
    - Card_list liste_carte
    - int nbr_cartes
    + Pioche(): Pioche
    + shuffle()
    + piocher(): Carte

}

Combinaison --|> Card_list
Joueur --> Card_list
Card_list --> Carte
Borne --> Combinaison
Frontiere --> Borne
Pioche --> Card_list


@enduml